variable "vpc_id" {}
variable "subnet_id" {}
variable "app_name" {}

resource "aws_key_pair" "deployer" {
  key_name   = "${var.app_name}-deployer"
  public_key = file("~/.ssh/id_ed25519.pub")
}

resource "aws_security_group" "ec2" {
  name        = "ec2-sg"
  description = "Security group for EC2 instance"
  vpc_id      = var.vpc_id
}

resource "aws_security_group_rule" "ec2" {
  security_group_id = aws_security_group.ec2.id

  type        = "ingress"
  from_port   = 5000
  to_port     = 5000
  protocol    = "tcp"
  cidr_blocks = ["10.0.0.0/8"]
}

resource "aws_instance" "main" {
  ami           = "ami-0c1bc9d3a2a2e4d89" # Amazon Linux 2 LTS
  instance_type = "t2.micro"
  key_name      = aws_key_pair.deployer.key_name

  vpc_security_group_ids = [aws_security_group.ec2.id]
  subnet_id              = var.subnet_id

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              apt-get update
              apt-get install -y docker-ce
              curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              mkdir -p /app
              git clone https://github.com/marcelojsilva/qa-gpt.git /app
              cd /app/server
              ln -s /app/.env .env
              docker-compose up -d
              EOF

  # user_data = <<-EOF
  #             #!/bin/bash
  #             sudo yum update -y
  #             sudo yum install -y docker
  #             sudo service docker start
  #             sudo usermod -a -G docker ec2-user
  #             sudo docker pull your-docker-image
  #             sudo docker run -d -p 5000:5000 --env-file /app/.env your-docker-image
  #             EOF

  tags = {
    Name = "ec2-instance"
  }
}

resource "aws_lb_target_group" "main" {
  name     = "ec2-target-group"
  port     = 5000
  protocol = "HTTP"
  vpc_id   = var.vpc_id

  health_check {
    path = "/healthcheck"
  }
}

resource "aws_lb_target_group_attachment" "main" {
  target_group_arn = aws_lb_target_group.main.arn
  target_id        = aws_instance.main.id
  port             = 5000
}

output "target_group_arn" {
  value = aws_lb_target_group.main.arn
}
